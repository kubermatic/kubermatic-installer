#!/usr/bin/env python
# expands a Mako template file

import argparse
import json
import yaml
import os
import sys
from collections import OrderedDict


## utility functions that may be called from templates

# reading YAML files, keeping dictionary orderings
def read_yaml(filename):
    # https://stackoverflow.com/a/21912744/677688
    class OrderedLoader(yaml.Loader):
        pass
    def construct_mapping(loader, node):
        loader.flatten_mapping(node)
        return OrderedDict(loader.construct_pairs(node))
    OrderedLoader.add_constructor(
        yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,
        construct_mapping)
    with open(filename) as stream:
        return yaml.load(stream, OrderedLoader)

# filter that converts to yaml (similar to Helm's toYaml)
def to_yaml(input):
    # output OrderedDicts (produced by read_yaml above) like normal dicts
    def dict_representer(dumper, data):
        return dumper.represent_dict(data.iteritems())
    yaml.add_representer(OrderedDict, dict_representer)

    return yaml.dump(input, default_flow_style=False)


# reading Terraform state files into nested python dicts
def read_tfstate(filename):
    result = {}

    js = json.load(open(filename))

    mod = js['modules'][0]

    for mod_name, mod_contents in mod['resources'].items():
        var = result
        for n in mod_name.split('.')[1:]:
            var[n] = var = var[n] if n in var else {}
        var.update(**mod_contents['primary']['attributes'])

    return result

# indent filter (as in Helm)
# filters can't be parameterized in Mako, hence a factory for unparamterized filters
def indent(n):
    def f(input):
        return "\n".join([  (n * " ") + line for line in input.split("\n")  ])
    return f

## END utility functions that may be called from templates


parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input', required=True, help='input file')
parser.add_argument('-o', '--output', help='output file')

args = parser.parse_args()


from mako import exceptions
from mako.template import Template
from mako.lookup import TemplateLookup

input_dir = os.path.realpath(os.path.dirname(args.input))

template = Template(
    open(args.input).read(),
    lookup = TemplateLookup(directories=[os.path.realpath('/home/ubuntu/smith/kubermatic-installer'), input_dir]),   # TODO this is just for testing
    module_directory = '/tmp')  # where it puts the compiled templates

prev_wd = os.getcwd()
os.chdir(input_dir)  # so file operations w/ relative paths work as expected in templates

# open structure for "vars" hash in templates, used to access and share arbitrary data
# TODO: make dot notation accessors work and return None when accessing unset keys
class Struct:
    pass

output = template.render(var = Struct(),
                         read_tfstate = read_tfstate,
                         read_yaml = read_yaml,
                         to_yaml = to_yaml,
                         **{ "indent%i" % n : indent(n) for n in range(15) }
)

os.chdir(prev_wd)

if args.output:
    with open(args.output, 'w') as f:
        f.write(output)
else:
    print output
